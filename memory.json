{"type":"entity","name":"YouTube Automation Tool","entityType":"Project","observations":["A Go-based command-line tool for automating YouTube video publishing workflow","Features include: YouTube video uploads with metadata, Hugo blog integration, Bluesky social media posting","Configuration via settings.yaml file and environment variables","Key files: main.go, cli.go, youtube.go, email.go, hugo.go, bluesky.go"]}
{"type":"entity","name":"Project Config","entityType":"Configuration","observations":["Uses settings.yaml with sections for email, AI, YouTube, Hugo, and Bluesky","Sensitive data can use environment variables: EMAIL_PASSWORD, AI_KEY, YOUTUBE_API_KEY, BLUESKY_PASSWORD","Required flags include email settings, AI settings (Azure OpenAI), YouTube API key, and Hugo path","Optional flags for Bluesky integration"]}
{"type":"entity","name":"Project Requirements","entityType":"Dependencies","observations":["Go 1.x","YouTube API credentials (client_secret.json)","Azure OpenAI API key","Email account for notifications","Optional: Hugo site repository","Optional: Bluesky account"]}
{"type":"entity","name":"Git Workflow Rule","entityType":"Process","observations":["When pushing changes to Git, add a list of completed Taskmaster tasks to the PR description","Mark tasks as 'done' in the PR description that have been completed in the current work","Always include task IDs and titles for clear tracking of completed work","This provides better visibility into what each PR accomplishes"]}
{"type":"entity","name":"Pre-Git Commit ANTHROPIC_API_KEY Check","entityType":"Development Process","observations":["Always check whether ANTHROPIC_API_KEY in .cursor/mcp.json is set before committing files to Git.","If the ANTHROPIC_API_KEY is found in .cursor/mcp.json, the Git commit process should be aborted."]}
{"type":"entity","name":"Charmbracelet Libraries","entityType":"UI Framework","observations":["The YouTube Automation project uses Charmbracelet libraries for its terminal UI components","Uses 'huh' library for interactive forms and confirmation dialogs","Uses 'lipgloss' for terminal styling and text formatting","Part of the confirmation utility implementation in pkg/utils/confirmation.go","Provides a consistent and user-friendly terminal UI experience"]}
{"type":"entity","entityType":"TestingGuideline","name":"MockingStrategy","observations":["Avoid doing mock except when working with external APIs.","Focus on integration tests with temporary files and actual file system operations where possible for non-external API interactions."]}
{"type":"entity","observations":["The project is written in Go.","The project is hosted on GitHub.","The `gh` CLI can be used for GitHub operations."],"name":"youtube-automation","entityType":"Project"}
{"type":"entity","observations":["`.cursor/mcp.json` IS version controlled.","Before committing and pushing changes that include `.cursor/mcp.json`:","1. Manually remove/redact any live API keys (like ANTHROPIC_API_KEY) from the local `.cursor/mcp.json` file.","2. Stage and commit the version of `.cursor/mcp.json` that has the keys removed/redacted.","3. Push these changes to the remote repository.","4. After the push is successful, manually revert the local `.cursor/mcp.json` file to re-insert the live API keys so the local MCP server continues to function correctly."],"entityType":"DevelopmentProcessGuideline","name":"MCPKeyHandlingForGitPush"}
{"type":"entity","entityType":"ProjectPreference","name":"DefaultPRBaseBranch","observations":["When creating pull requests for the `youtube-automation` project, the default base branch to merge into should be `main`."]}
{"type":"entity","name":"PullRequestWorkflow","observations":["When a pull request (PR) is created based on work stemming from a GitHub Issue labeled `PRD` (which serves as the Product Requirement Document):","The PR description MUST include a direct link to the originating PRD GitHub Issue.","The local Taskmaster task files (i.e., `tasks/tasks.json` and all individual markdown files in the `tasks/` directory), which were generated from the PRD GitHub Issue for local development, should be REMOVED from the local file system. (Note: These files are in `.gitignore` and their removal is a local cleanup, not part of the PR's diff - see `TasksDirectoryHandling`)."],"entityType":"DevelopmentProcessGuideline"}
{"type":"entity","observations":["The `tasks/` directory and its contents are listed in `.gitignore`.","When removing task files as part of a workflow (like PR finalization):","1. Remove ALL files from the `tasks/` directory using `rm -rf tasks/*` or `rm -f tasks/*` (if you want to be prompted for directories). Be cautious with `rm -rf`.","2. This is a local filesystem change, not a staged `git rm` action, due to `.gitignore`."],"name":"TasksDirectoryHandling","entityType":"ProjectConfiguration"}
{"type":"entity","name":"DefaultPRMergeStrategy","observations":["When merging pull requests for the `youtube-automation` project, the default strategy should be to SQUASH and merge."],"entityType":"ProjectPreference"}
{"type":"entity","entityType":"DevelopmentProcessGuideline","name":"PrePRMergeChecklist","observations":["Before attempting to merge a pull request:","1. Always check for uncommitted local changes or modified tracked files using `git status`.","2. Ensure these are either committed, stashed, or intentionally excluded before proceeding with the merge operation."]}
{"type":"entity","name":"CommitMessageSuggestion","observations":["When new changes are staged for a commit, always suggest a commit message rather than asking the user to provide one. The suggestion should be based on the nature of the staged files and changes."],"entityType":"DevelopmentProcessGuideline"}
{"type":"entity","observations":["When presenting the user with choices or alternative actions, always format them as a numbered list to make it easier for the user to indicate their selection."],"name":"NumberedOptionsForChoices","entityType":"CommunicationStyleGuideline"}
{"type":"entity","entityType":"Guideline","observations":["Always run all tests after making code changes to confirm the changes work correctly."],"name":"Post-Change Testing Guideline"}
{"type":"entity","name":"Post-Change Compilation Guideline","entityType":"Guideline","observations":["Always compile the code to verify that it works."]}
{"type":"entity","name":"Coverage Tracking Method Guideline","entityType":"Guideline","observations":["Before initiating any code modifications or applying suggested edits (e.g., immediately before calling `edit_file` or starting manual coding), always generate a baseline coverage profile using `go test -coverprofile=coverage_before.out ./...`. After changes are successfully applied and all tests pass, generate the subsequent profile using `go test -coverprofile=coverage_after.out ./...`. Comparison should then be done manually (e.g., using `go tool cover -html=<filename>`)."]}
{"type":"entity","name":"EndOfSessionGitPushTrigger","entityType":"DevelopmentProcessGuideline","observations":["When the user indicates completion with a phrase like 'We are done', initiate the Git push process: 1. Check `git status`. 2. If there are uncommitted changes, ask the user how to handle them (stage all, stage specific, discard). 3. If changes are staged or need staging, suggest a commit message and ask for confirmation before committing. 4. Before pushing to `main` (or merging to `main`), execute the pre-push build checks defined in `MandatoryDevboxBuildBeforeMain`. 5. Check `.cursor/mcp.json` for sensitive keys as per `MCPKeyHandlingForGitPush`. 6. If all checks pass and the repository is ready, execute `git push`. If any step fails or requires user input, pause and ask for instructions."]}
{"type":"entity","name":"Test-Driven Development","observations":["ACTION REQUIRED: YOU MUST APPLY Test-Driven Development (TDD) for all code changes in this project.","FIRST STEP: Before proposing *any* code modification (e.g., via `edit_file`) or writing implementation code, ALWAYS write the necessary test(s) first.","TDD CYCLE: Follow the Red-Green-Refactor cycle (Write failing test -> Write code to pass -> Refactor).","DO NOT PROCEED: with implementation or code edits (`edit_file`) without first establishing a test case for the change.","TDD is a software development approach where tests are written before the code implementation.","Benefits include better design, higher code quality, built-in regression testing, and clear specification of requirements.","**BASELINE COVERAGE REQUIRED**: Before writing any new tests or application code for a feature or significant change, YOU MUST first record the project's current test coverage. Use the project-specific command (e.g., `go test ./... -cover` for Go projects). Log this baseline coverage figure. This step is critical for understanding the impact of new tests and changes."],"entityType":"Development Principle"}
{"type":"entity","observations":["**ACTION REQUIRED**: When proposing a `git push`, first check `git status`. If there are uncommitted changes (modified or untracked files), propose staging and committing *all* of them before suggesting the push command. Do not propose `git push` if uncommitted changes exist unless the user explicitly instructs otherwise."],"name":"SuggestPushAllChangesGuideline","entityType":"DevelopmentProcessGuideline"}
{"type":"entity","entityType":"DevelopmentProcessGuideline","name":"MandatoryDevboxBuildBeforeMain","observations":["**ACTION REQUIRED**: Before executing `git push` to the `main` branch (or merging any branch into `main`), YOU MUST build the binary using `go build -o youtube-release` and make it executable using `chmod +x youtube-release`. Do not proceed with the push/merge until this build completes successfully. **REMINDER:** After the build succeeds, if you want to install this new version globally, **you need to manually run `sudo mv youtube-release /usr/local/bin`**. This installation step is manual and requires `sudo`."]}
{"type":"entity","name":"PRDHandlingGuideline","observations":["Product Requirement Documents (PRDs) are to be created and managed as GitHub Issues.","GitHub Issues representing PRDs MUST be labeled with `PRD` for easy identification and filtering.","Developers will typically fetch GitHub Issues labeled `PRD` from1 GitHub to select a requirement to work on.","Local Taskmaster tasks are expected to be generated or created based on the content of the selected PRD GitHub Issue to guide local development."],"entityType":"DevelopmentProcessGuideline"}
{"type":"entity","name":"GitHubCLIGuideline","observations":["When performing operations with GitHub (e.g., creating issues, managing pull requests, etc.), the `gh` command-line interface (CLI) tool SHOULD be used as the primary method.","This promotes consistency, scriptability, and aligns with project practices.","The existing `youtube-automation` project entity notes that the `gh` CLI can be used."],"entityType":"DevelopmentProcessGuideline"}
{"type":"entity","name":"Get PRDs","entityType":"UserIntent","observations":["User wants to work with Taskmaster and GitHub issues labeled PRD."]}
{"type":"entity","observations":["A tool for managing software development projects."],"name":"Taskmaster","entityType":"Tool"}
{"type":"entity","entityType":"DataSource","observations":["These issues are used as Product Requirement Documents."],"name":"GitHub Issues with PRD label"}
{"type":"entity","entityType":"DevelopmentProcessGuideline","name":"PRDIssueClosureSync","observations":["When a set of Taskmaster tasks derived from1 a PRD (Product Requirement Document, which is a GitHub Issue labeled 'PRD') is considered complete or closed, the original GitHub Issue that served as the PRD should also be closed on GitHub."]}
{"type":"relation","from":"YouTube Automation Tool","to":"Project Config","relationType":"uses"}
{"type":"relation","from":"YouTube Automation Tool","to":"Project Requirements","relationType":"requires"}
{"type":"relation","from":"Project","to":"YouTube Automation Tool","relationType":"is"}
{"type":"relation","from":"YouTube Automation Tool","to":"Charmbracelet Libraries","relationType":"uses for UI"}
{"type":"relation","to":"Taskmaster","relationType":"means user wants to work with","from":"Get PRDs"}
{"type":"relation","from":"Get PRDs","relationType":"means user wants to work with","to":"GitHub Issues with PRD label"}
{"type":"relation","to":"Taskmaster","from":"GitHub Issues with PRD label","relationType":"are used as PRDs for"}